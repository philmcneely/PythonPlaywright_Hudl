name: Playwright Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [opened, reopened, synchronize]

permissions:
  contents: write
  issues: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate cache key
        id: cache-key
        run: echo "key=python-${{ runner.os }}-${{ hashFiles('requirements_with_versions.txt') }}" >> $GITHUB_OUTPUT

      - name: Cache Python dependencies
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: ~/.cache/pip
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Install Python dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_with_versions.txt

      - name: Install Browserstack SDK
        run: pip install browserstack-local

      - name: Install Ollama CLI
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          pip install ollama

      # - name: Start Ollama service
      #   run: |
      #     nohup ollama serve > ollama.log 2>&1 &
      #     sleep 10  # wait for service to start

      # - name: Pull Ollama model from secret
      #   run: ollama pull ${{ secrets.OLLAMA_MODEL }}

      # - name: List Ollama models
      #   run: ollama list

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: cache-browsers
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('requirements_with_versions.txt') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      - name: Install Playwright browsers
        if: steps.cache-browsers.outputs.cache-hit != 'true'
        run: python -m playwright install --with-deps

  smoke:
    runs-on: ubuntu-latest
    needs: setup
    env:
      USER_PM_EMAIL: ${{ secrets.USER_PM_EMAIL }}
      USER_PM_PASSWORD: ${{ secrets.USER_PM_PASSWORD }}
      USER_PM_ROLE: ${{ secrets.USER_PM_ROLE }}
      USER_PM_FIRST: ${{ secrets.USER_PM_FIRST }}
      USER_PM_LAST: ${{ secrets.USER_PM_LAST }}
      USER_PM_INITIALS: ${{ secrets.USER_PM_INITIALS }}
      USER_ADMIN_EMAIL: ${{ secrets.USER_ADMIN_EMAIL }}
      USER_ADMIN_PASSWORD: ${{ secrets.USER_ADMIN_PASSWORD }}
      USER_ADMIN_ROLE: ${{ secrets.USER_ADMIN_ROLE }}
      USER_ADMIN_FIRST: ${{ secrets.USER_ADMIN_FIRST }}
      USER_ADMIN_LAST: ${{ secrets.USER_ADMIN_LAST }}
      USER_ADMIN_INITIALS: ${{ secrets.USER_ADMIN_INITIALS }}
      USER_COACH_EMAIL: ${{ secrets.USER_COACH_EMAIL }}
      USER_COACH_PASSWORD: ${{ secrets.USER_COACH_PASSWORD }}
      USER_COACH_ROLE: ${{ secrets.USER_COACH_ROLE }}
      USER_COACH_FIRST: ${{ secrets.USER_COACH_FIRST }}
      USER_COACH_LAST: ${{ secrets.USER_COACH_LAST }}
      USER_COACH_INITIALS: ${{ secrets.USER_COACH_INITIALS }}
      BASE_URL: ${{ secrets.BASE_URL }}
      API_LOGIN_URL: ${{ secrets.API_LOGIN_URL }}
      AI_HEALING_ENABLED: ${{ secrets.AI_HEALING_ENABLED }}
      AI_HEALING_ENDPOINT: ${{ secrets.AI_HEALING_ENDPOINT }}
      AI_HEALING_CONFIDENCE: ${{ secrets.AI_HEALING_CONFIDENCE }}
      OLLAMA_MODEL: ${{ secrets.OLLAMA_MODEL }}
      OLLAMA_HOST: ${{ secrets.OLLAMA_HOST }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Restore Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.python-cache-key }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Install dependencies (from cache)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_with_versions.txt

      - name: Install Browserstack SDK
        run: pip install browserstack-local

      - name: Install Ollama CLI
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          pip install ollama

      # - name: Start Ollama service
      #   run: |
      #     nohup ollama serve > ollama.log 2>&1 &
      #     sleep 10  # wait for service to start

      # - name: Pull Ollama model from secret
      #   run: ollama pull ${{ secrets.OLLAMA_MODEL }}

      # - name: List Ollama models
      #   run: ollama list

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('requirements_with_versions.txt') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      - name: Install Allure commandline
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -xzf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version

      - name: Restore Allure history (smoke-chromium)
        uses: actions/download-artifact@v4
        with:
          name: allure-history-smoke-chromium
          path: .allure-history-smoke-chromium
        continue-on-error: true

      - name: Run chromium smoke tests
        run: |
          mkdir -p test_artifacts/allure/allure-report
          mkdir -p test_artifacts/allure/allure-results/history
          mkdir -p .allure-history-smoke-chromium
          cp -r .allure-history-smoke-chromium/* test_artifacts/allure/allure-results/history/ 2>/dev/null || true
          mkdir -p test_artifacts/allure/screenshots
          cat > test_artifacts/allure/allure-results/environment.properties <<EOF
          browser=chromium
          headless=true
          baseUrl=$BASE_URL
          commit=$GITHUB_SHA
          branch=$GITHUB_REF_NAME
          runId=$GITHUB_RUN_ID
          testSuite=smoke
          EOF
          AI_HEALING_ENABLED=false HEADLESS=true pytest --alluredir=test_artifacts/allure/allure-results --capture=tee-sys --reruns 2 --reruns-delay 5 -m smoke -n auto

      - name: Generate Test Results (smoke-chromium)
        if: always()
        run: |
          allure generate test_artifacts/allure/allure-results -o test_artifacts/allure/allure-report --clean --single-file
          mv test_artifacts/allure/allure-report/index.html test_artifacts/allure/allure-report/index_smoke_chromium.html

      - name: Save Allure history (smoke-chromium)
        if: always()
        run: |
          mkdir -p .allure-history-smoke-chromium
          if [ -d "test_artifacts/allure/allure-report/history" ]; then
            cp -r test_artifacts/allure/allure-report/history/* .allure-history-smoke-chromium/ 2>/dev/null || true
          else
            echo "No history generated yet" > .allure-history-smoke-chromium/.placeholder
          fi

      - name: Upload Allure history artifact (smoke-chromium)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-history-smoke-chromium
          path: .allure-history-smoke-chromium
          if-no-files-found: ignore

      - name: Upload test report & screenshots (smoke-chromium)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-chromium-report
          path: test_artifacts/allure/allure-report

      - name: Publish Smoke Report (Chromium) to GitHub Pages
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: test_artifacts/allure/allure-report
          destination_dir: smoke/chromium

      - name: Restore Allure history (smoke-firefox)
        uses: actions/download-artifact@v4
        with:
          name: allure-history-smoke-firefox
          path: .allure-history-smoke-firefox
        continue-on-error: true

      - name: Run firefox smoke tests
        run: |
          mkdir -p test_artifacts/allure/allure-report
          mkdir -p test_artifacts/allure/allure-results/history
          mkdir -p .allure-history-smoke-firefox
          cp -r .allure-history-smoke-firefox/* test_artifacts/allure/allure-results/history/ 2>/dev/null || true
          mkdir -p test_artifacts/allure/screenshots
          cat > test_artifacts/allure/allure-results/environment.properties <<EOF
          browser=firefox
          headless=true
          baseUrl=$BASE_URL
          commit=$GITHUB_SHA
          branch=$GITHUB_REF_NAME
          runId=$GITHUB_RUN_ID
          testSuite=smoke
          EOF
          AI_HEALING_ENABLED=false BROWSER=firefox HEADLESS=true pytest --alluredir=test_artifacts/allure/allure-results --capture=tee-sys --reruns 2 --reruns-delay 5 -m smoke -n auto

      - name: Generate Test Results (smoke-firefox)
        if: always()
        run: |
          allure generate test_artifacts/allure/allure-results -o test_artifacts/allure/allure-report --clean --single-file
          mv test_artifacts/allure/allure-report/index.html test_artifacts/allure/allure-report/index_smoke_firefox.html

      - name: Save Allure history (smoke-firefox)
        if: always()
        run: |
          mkdir -p .allure-history-smoke-firefox
          if [ -d "test_artifacts/allure/allure-report/history" ]; then
            cp -r test_artifacts/allure/allure-report/history/* .allure-history-smoke-firefox/ 2>/dev/null || true
          else
            echo "No history generated yet" > .allure-history-smoke-firefox/.placeholder
          fi

      - name: Upload Allure history artifact (smoke-firefox)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-history-smoke-firefox
          path: .allure-history-smoke-firefox
          if-no-files-found: ignore

      - name: Upload test report & screenshots (smoke-firefox)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-firefox-report
          path: test_artifacts/allure/allure-report

      - name: Publish Smoke Report (Firefox) to GitHub Pages
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: test_artifacts/allure/allure-report
          destination_dir: smoke/firefox

      # Some kind of GHA error runnign webkit, defer for now - common fixes didnt work
      # - name: Run webkit smoke tests
      #   run: |
      #     mkdir -p test_artifacts/allure/allure-report
      #     mkdir -p test_artifacts/allure/allure-results
      #     mkdir -p test_artifacts/allure/screenshots
      #     BROWSER=webkit HEADLESS=true pytest --alluredir=test_artifacts/allure/allure-results --capture=tee-sys --reruns 2 --reruns-delay 5 -m smoke -n auto

      - name: Comment PR with test summary
        if: github.event.pull_request.head.repo.full_name == github.repository
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const status = process.env.JOB_STATUS || 'unknown';
            const summary = status === 'success'
              ? '✅ All smoke tests passed! [View report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
              : '❌ Some smoke tests failed. [View report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            })
        env:
          JOB_STATUS: ${{ job.status }}

  full:
    runs-on: ubuntu-latest
    needs: [setup, smoke]
    timeout-minutes: 60
    env:
      USER_PM_EMAIL: ${{ secrets.USER_PM_EMAIL }}
      USER_PM_PASSWORD: ${{ secrets.USER_PM_PASSWORD }}
      USER_PM_ROLE: ${{ secrets.USER_PM_ROLE }}
      USER_PM_FIRST: ${{ secrets.USER_PM_FIRST }}
      USER_PM_LAST: ${{ secrets.USER_PM_LAST }}
      USER_PM_INITIALS: ${{ secrets.USER_PM_INITIALS }}
      USER_ADMIN_EMAIL: ${{ secrets.USER_ADMIN_EMAIL }}
      USER_ADMIN_PASSWORD: ${{ secrets.USER_ADMIN_PASSWORD }}
      USER_ADMIN_ROLE: ${{ secrets.USER_ADMIN_ROLE }}
      USER_ADMIN_FIRST: ${{ secrets.USER_ADMIN_FIRST }}
      USER_ADMIN_LAST: ${{ secrets.USER_ADMIN_LAST }}
      USER_ADMIN_INITIALS: ${{ secrets.USER_ADMIN_INITIALS }}
      USER_COACH_EMAIL: ${{ secrets.USER_COACH_EMAIL }}
      USER_COACH_PASSWORD: ${{ secrets.USER_COACH_PASSWORD }}
      USER_COACH_ROLE: ${{ secrets.USER_COACH_ROLE }}
      USER_COACH_FIRST: ${{ secrets.USER_COACH_FIRST }}
      USER_COACH_LAST: ${{ secrets.USER_COACH_LAST }}
      USER_COACH_INITIALS: ${{ secrets.USER_COACH_INITIALS }}
      BASE_URL: ${{ secrets.BASE_URL }}
      API_LOGIN_URL: ${{ secrets.API_LOGIN_URL }}
      AI_HEALING_ENABLED: ${{ secrets.AI_HEALING_ENABLED }}
      AI_HEALING_ENDPOINT: ${{ secrets.AI_HEALING_ENDPOINT }}
      AI_HEALING_CONFIDENCE: ${{ secrets.AI_HEALING_CONFIDENCE }}
      OLLAMA_MODEL: ${{ secrets.OLLAMA_MODEL }}
      OLLAMA_HOST: ${{ secrets.OLLAMA_HOST }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Restore Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.python-cache-key }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Install dependencies (from cache)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_with_versions.txt

      - name: Install Browserstack SDK
        run: pip install browserstack-local

      - name: Install Ollama CLI
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          pip install ollama

      # - name: Start Ollama service
      #   run: |
      #     nohup ollama serve > ollama.log 2>&1 &
      #     sleep 10  # wait for service to start

      # - name: Pull Ollama model from secret
      #   run: ollama pull ${{ secrets.OLLAMA_MODEL }}

      # - name: List Ollama models
      #   run: ollama list

      - name: Restore Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('requirements_with_versions.txt') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      - name: Install Allure commandline
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -xzf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version

      - name: Restore Allure history (full-chromium)
        uses: actions/download-artifact@v4
        with:
          name: allure-history-full-chromium
          path: .allure-history-full-chromium
        continue-on-error: true

      - name: Run chromium full test suite
        run: |
          mkdir -p test_artifacts/allure/allure-report
          mkdir -p test_artifacts/allure/allure-results/history
          mkdir -p .allure-history-full-chromium
          cp -r .allure-history-full-chromium/* test_artifacts/allure/allure-results/history/ 2>/dev/null || true
          mkdir -p test_artifacts/allure/screenshots
          cat > test_artifacts/allure/allure-results/environment.properties <<EOF
          browser=chromium
          headless=true
          baseUrl=$BASE_URL
          commit=$GITHUB_SHA
          branch=$GITHUB_REF_NAME
          runId=$GITHUB_RUN_ID
          testSuite=full
          EOF
          AI_HEALING_ENABLED=false HEADLESS=true pytest --alluredir=test_artifacts/allure/allure-results --capture=tee-sys --reruns 2 --reruns-delay 5 -m  "login and not (smoke or danger)" -n auto

      - name: Generate Test Results (full-chromium)
        if: always()
        run: |
          allure generate test_artifacts/allure/allure-results -o test_artifacts/allure/allure-report --clean --single-file
          mv test_artifacts/allure/allure-report/index.html test_artifacts/allure/allure-report/index_full_chromium.html

      - name: Save Allure history (full-chromium)
        if: always()
        run: |
          mkdir -p .allure-history-full-chromium
          if [ -d "test_artifacts/allure/allure-report/history" ]; then
            cp -r test_artifacts/allure/allure-report/history/* .allure-history-full-chromium/ 2>/dev/null || true
          else
            echo "No history generated yet" > .allure-history-full-chromium/.placeholder
          fi

      - name: Upload Allure history artifact (full-chromium)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-history-full-chromium
          path: .allure-history-full-chromium
          if-no-files-found: ignore

      - name: Upload test report & screenshots (full-chromium)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-chromium-report
          path: test_artifacts/allure/allure-report

      - name: Publish Full Report (Chromium) to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: test_artifacts/allure/allure-report
          destination_dir: full/chromium

      - name: Comment PR with test summary (full-chromium)
        if: github.event.pull_request.head.repo.full_name == github.repository
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const status = process.env.JOB_STATUS || 'unknown';
            const summary = status === 'success'
              ? '✅ All chromium login tests passed! [View report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
              : '❌ Some chromium login tests failed. [View report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            })
        env:
          JOB_STATUS: ${{ job.status }}

      - name: Restore Allure history (full-firefox)
        uses: actions/download-artifact@v4
        with:
          name: allure-history-full-firefox
          path: .allure-history-full-firefox
        continue-on-error: true

      # Originally was going to run just compatibility tests, but decided for now,
      # with small suite to run full.  this should be broken out to a seperate job likely in future
      - name: Run firefox full tests
        run: |
          mkdir -p test_artifacts/allure/allure-report
          mkdir -p test_artifacts/allure/allure-results/history
          mkdir -p .allure-history-full-firefox
          cp -r .allure-history-full-firefox/* test_artifacts/allure/allure-results/history/ 2>/dev/null || true
          mkdir -p test_artifacts/allure/screenshots
          cat > test_artifacts/allure/allure-results/environment.properties <<EOF
          browser=firefox
          headless=true
          baseUrl=$BASE_URL
          commit=$GITHUB_SHA
          branch=$GITHUB_REF_NAME
          runId=$GITHUB_RUN_ID
          testSuite=full
          EOF
          AI_HEALING_ENABLED=false BROWSER=firefox HEADLESS=true pytest --alluredir=test_artifacts/allure/allure-results --capture=tee-sys --reruns 2 --reruns-delay 5 -m "login and not (smoke or danger)" -n auto

      - name: Generate Test Results (full-firefox)
        if: always()
        run: |
          allure generate test_artifacts/allure/allure-results -o test_artifacts/allure/allure-report --clean --single-file
          mv test_artifacts/allure/allure-report/index.html test_artifacts/allure/allure-report/index_full_firefox.html

      - name: Save Allure history (full-firefox)
        if: always()
        run: |
          mkdir -p .allure-history-full-firefox
          if [ -d "test_artifacts/allure/allure-report/history" ]; then
            cp -r test_artifacts/allure/allure-report/history/* .allure-history-full-firefox/ 2>/dev/null || true
          else
            echo "No history generated yet" > .allure-history-full-firefox/.placeholder
          fi

      - name: Upload Allure history artifact (full-firefox)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-history-full-firefox
          path: .allure-history-full-firefox
          if-no-files-found: ignore

      - name: Upload test report & screenshots (full-firefox)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-firefox-report
          path: test_artifacts/allure/allure-report

      - name: Publish Full Report (Firefox) to GitHub Pages
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: test_artifacts/allure/allure-report
          destination_dir: full/firefox

      - name: Comment PR with test summary (full-firefox)
        if: github.event.pull_request.head.repo.full_name == github.repository
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const status = process.env.JOB_STATUS || 'unknown';
            const summary = status === 'success'
              ? '✅ All firefox login tests passed! [View report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
              : '❌ Some firefox login tests failed. [View report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            })
        env:
          JOB_STATUS: ${{ job.status }}

  # Optional: Create a dashboard index page
  dashboard:
    runs-on: ubuntu-latest
    needs: [smoke, full]
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
      - uses: actions/checkout@v4

      - name: Create dashboard index
        run: |
          mkdir -p dashboard
          cat > dashboard/index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Test Execution Dashboard</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .dashboard { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
                  .card { border: 1px solid #ddd; padding: 20px; border-radius: 8px; }
                  .card h3 { margin-top: 0; }
                  .card a { display: block; margin: 10px 0; padding: 10px; background: #f5f5f5; text-decoration: none; border-radius: 4px; }
                  .card a:hover { background: #e5e5e5; }
              </style>
          </head>
          <body>
              <h1>🚀 Test Execution Dashboard</h1>
              <p>Latest test results from <strong>${GITHUB_SHA:0:7}</strong> on <strong>${GITHUB_REF_NAME}</strong></p>

              <div class="dashboard">
                  <div class="card">
                      <h3>🔥 Smoke Tests</h3>
                      <a href="smoke/chromium/">Chromium Smoke Tests</a>
                      <a href="smoke/firefox/">Firefox Smoke Tests</a>
                  </div>

                  <div class="card">
                      <h3>🎯 Full Test Suite</h3>
                      <a href="full/chromium/">Chromium Full Tests</a>
                      <a href="full/firefox/">Firefox Full Tests</a>
                  </div>
              </div>

              <hr style="margin: 40px 0;">
              <p><small>Updated: $(date)</small></p>
          </body>
          </html>
          EOF

      - name: Publish Dashboard Index to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: dashboard
          keep_files: true
        