name: Playwright Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [opened, reopened, synchronize]

permissions:
  contents: write
  pages: write
  id-token: write
  issues: write
  pull-requests: write

env:
  ALLURE_VERSION: "2.27.0"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate cache key
        id: cache-key
        run: echo "key=python-${{ runner.os }}-${{ hashFiles('requirements_with_versions.txt') }}" >> $GITHUB_OUTPUT

      - name: Cache Python dependencies
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: ~/.cache/pip
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Install Python dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_with_versions.txt

      - name: Install Ollama CLI
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          pip install ollama

      # - name: Start Ollama service
      #   run: |
      #     nohup ollama serve > ollama.log 2>&1 &
      #     sleep 10  # wait for service to start

      # - name: Pull Ollama model from secret
      #   run: ollama pull ${{ secrets.OLLAMA_MODEL }}

      # - name: List Ollama models
      #   run: ollama list

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: cache-browsers
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('requirements_with_versions.txt') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      - name: Install Playwright browsers
        if: steps.cache-browsers.outputs.cache-hit != 'true'
        run: python -m playwright install --with-deps

  smoke:
    runs-on: ubuntu-latest
    needs: setup
    env:
      USER_PM_EMAIL: ${{ secrets.USER_PM_EMAIL }}
      USER_PM_PASSWORD: ${{ secrets.USER_PM_PASSWORD }}
      USER_PM_ROLE: ${{ secrets.USER_PM_ROLE }}
      USER_PM_FIRST: ${{ secrets.USER_PM_FIRST }}
      USER_PM_LAST: ${{ secrets.USER_PM_LAST }}
      USER_PM_INITIALS: ${{ secrets.USER_PM_INITIALS }}
      USER_ADMIN_EMAIL: ${{ secrets.USER_ADMIN_EMAIL }}
      USER_ADMIN_PASSWORD: ${{ secrets.USER_ADMIN_PASSWORD }}
      USER_ADMIN_ROLE: ${{ secrets.USER_ADMIN_ROLE }}
      USER_ADMIN_FIRST: ${{ secrets.USER_ADMIN_FIRST }}
      USER_ADMIN_LAST: ${{ secrets.USER_ADMIN_LAST }}
      USER_ADMIN_INITIALS: ${{ secrets.USER_ADMIN_INITIALS }}
      USER_COACH_EMAIL: ${{ secrets.USER_COACH_EMAIL }}
      USER_COACH_PASSWORD: ${{ secrets.USER_COACH_PASSWORD }}
      USER_COACH_ROLE: ${{ secrets.USER_COACH_ROLE }}
      USER_COACH_FIRST: ${{ secrets.USER_COACH_FIRST }}
      USER_COACH_LAST: ${{ secrets.USER_COACH_LAST }}
      USER_COACH_INITIALS: ${{ secrets.USER_COACH_INITIALS }}
      BASE_URL: ${{ secrets.BASE_URL }}
      API_LOGIN_URL: ${{ secrets.API_LOGIN_URL }}
      AI_HEALING_ENABLED: ${{ secrets.AI_HEALING_ENABLED }}
      AI_HEALING_ENDPOINT: ${{ secrets.AI_HEALING_ENDPOINT }}
      AI_HEALING_CONFIDENCE: ${{ secrets.AI_HEALING_CONFIDENCE }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Restore Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.python-cache-key }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Install dependencies (from cache)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_with_versions.txt

      - name: Install Allure commandline
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          wget https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.tgz
          tar -xzf allure-${ALLURE_VERSION}.tgz
          sudo mv allure-${ALLURE_VERSION} /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version

      - name: Compute Pages paths (smoke)
        id: paths
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_PATH="pr/${{ github.head_ref }}"
          else
            BASE_PATH=""
          fi
          echo "CHROMIUM_PATH=${BASE_PATH:+$BASE_PATH/}smoke/chromium" >> $GITHUB_OUTPUT
          echo "FIREFOX_PATH=${BASE_PATH:+$BASE_PATH/}smoke/firefox" >> $GITHUB_OUTPUT

      # ---------- Smoke Chromium ----------
      - name: Restore history from gh-pages (smoke-chromium)
        run: |
          mkdir -p test_artifacts/allure/allure-results/history
          git init ghp-read
          cd ghp-read
          git remote add origin "https://github.com/${GITHUB_REPOSITORY}.git"
          git fetch --depth=1 origin gh-pages || true
          git checkout gh-pages || echo "No gh-pages yet"
          cd ..
          if [ -d "ghp-read/${{ steps.paths.outputs.CHROMIUM_PATH }}/history" ]; then
            cp -r "ghp-read/${{ steps.paths.outputs.CHROMIUM_PATH }}/history/"* test_artifacts/allure/allure-results/history/ || true
          fi

      - name: Run chromium smoke tests
        run: |
          mkdir -p test_artifacts/allure/allure-report
          mkdir -p test_artifacts/allure/allure-results/history
          mkdir -p test_artifacts/allure/screenshots
          cat > test_artifacts/allure/allure-results/environment.properties <<EOF
          browser=chromium
          headless=true
          baseUrl=$BASE_URL
          commit=$GITHUB_SHA
          branch=$GITHUB_REF_NAME
          runId=$GITHUB_RUN_ID
          testSuite=smoke
          EOF
          AI_HEALING_ENABLED=false HEADLESS=true pytest --alluredir=test_artifacts/allure/allure-results --capture=tee-sys --reruns 2 --reruns-delay 5 -m smoke -n auto

      - name: Generate Test Results (smoke-chromium)
        if: always()
        run: |
          allure generate test_artifacts/allure/allure-results -o test_artifacts/allure/allure-report --clean --single-file

      - name: Publish Smoke Report (Chromium) + History to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: test_artifacts/allure/allure-report
          destination_dir: ${{ steps.paths.outputs.CHROMIUM_PATH }}
          keep_files: true

      - name: Persist history to gh-pages (smoke-chromium)
        run: |
          git init ghp-write
          cd ghp-write
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git fetch --depth=1 origin gh-pages || true
          git checkout -B gh-pages
          mkdir -p "${{ steps.paths.outputs.CHROMIUM_PATH }}/history"
          cp -r ../test_artifacts/allure/allure-report/history/* "${{ steps.paths.outputs.CHROMIUM_PATH }}/history/" 2>/dev/null || true
          git add -A
          git commit -m "Update Allure history (smoke-chromium) for ${GITHUB_SHA}" || true
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---------- Smoke Firefox ----------
      - name: Restore history from gh-pages (smoke-firefox)
        run: |
          mkdir -p test_artifacts/allure/allure-results/history
          if [ -d "ghp-read/${{ steps.paths.outputs.FIREFOX_PATH }}/history" ]; then
            cp -r "ghp-read/${{ steps.paths.outputs.FIREFOX_PATH }}/history/"* test_artifacts/allure/allure-results/history/ || true
          fi

      - name: Run firefox smoke tests
        run: |
          mkdir -p test_artifacts/allure/allure-report
          mkdir -p test_artifacts/allure/allure-results/history
          mkdir -p test_artifacts/allure/screenshots
          cat > test_artifacts/allure/allure-results/environment.properties <<EOF
          browser=firefox
          headless=true
          baseUrl=$BASE_URL
          commit=$GITHUB_SHA
          branch=$GITHUB_REF_NAME
          runId=$GITHUB_RUN_ID
          testSuite=smoke
          EOF
          AI_HEALING_ENABLED=false BROWSER=firefox HEADLESS=true pytest --alluredir=test_artifacts/allure/allure-results --capture=tee-sys --reruns 2 --reruns-delay 5 -m smoke -n auto

      - name: Generate Test Results (smoke-firefox)
        if: always()
        run: |
          allure generate test_artifacts/allure/allure-results -o test_artifacts/allure/allure-report --clean --single-file

      - name: Publish Smoke Report (Firefox) + History to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: test_artifacts/allure/allure-report
          destination_dir: ${{ steps.paths.outputs.FIREFOX_PATH }}
          keep_files: true

      - name: Persist history to gh-pages (smoke-firefox)
        run: |
          cd ghp-write
          git pull
          mkdir -p "${{ steps.paths.outputs.FIREFOX_PATH }}/history"
          cp -r ../test_artifacts/allure/allure-report/history/* "${{ steps.paths.outputs.FIREFOX_PATH }}/history/" 2>/dev/null || true
          git add -A
          git commit -m "Update Allure history (smoke-firefox) for ${GITHUB_SHA}" || true
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  full:
    runs-on: ubuntu-latest
    needs: [setup, smoke]
    timeout-minutes: 60
    env:
      USER_PM_EMAIL: ${{ secrets.USER_PM_EMAIL }}
      USER_PM_PASSWORD: ${{ secrets.USER_PM_PASSWORD }}
      USER_PM_ROLE: ${{ secrets.USER_PM_ROLE }}
      USER_PM_FIRST: ${{ secrets.USER_PM_FIRST }}
      USER_PM_LAST: ${{ secrets.USER_PM_LAST }}
      USER_PM_INITIALS: ${{ secrets.USER_PM_INITIALS }}
      USER_ADMIN_EMAIL: ${{ secrets.USER_ADMIN_EMAIL }}
      USER_ADMIN_PASSWORD: ${{ secrets.USER_ADMIN_PASSWORD }}
      USER_ADMIN_ROLE: ${{ secrets.USER_ADMIN_ROLE }}
      USER_ADMIN_FIRST: ${{ secrets.USER_ADMIN_FIRST }}
      USER_ADMIN_LAST: ${{ secrets.USER_ADMIN_LAST }}
      USER_ADMIN_INITIALS: ${{ secrets.USER_ADMIN_INITIALS }}
      USER_COACH_EMAIL: ${{ secrets.USER_COACH_EMAIL }}
      USER_COACH_PASSWORD: ${{ secrets.USER_COACH_PASSWORD }}
      USER_COACH_ROLE: ${{ secrets.USER_COACH_ROLE }}
      USER_COACH_FIRST: ${{ secrets.USER_COACH_FIRST }}
      USER_COACH_LAST: ${{ secrets.USER_COACH_LAST }}
      USER_COACH_INITIALS: ${{ secrets.USER_COACH_INITIALS }}
      BASE_URL: ${{ secrets.BASE_URL }}
      API_LOGIN_URL: ${{ secrets.API_LOGIN_URL }}
      AI_HEALING_ENABLED: ${{ secrets.AI_HEALING_ENABLED }}
      AI_HEALING_ENDPOINT: ${{ secrets.AI_HEALING_ENDPOINT }}
      AI_HEALING_CONFIDENCE: ${{ secrets.AI_HEALING_CONFIDENCE }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Restore Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.python-cache-key }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Install dependencies (from cache)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_with_versions.txt

      - name: Install Allure commandline
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          wget https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.tgz
          tar -xzf allure-${ALLURE_VERSION}.tgz
          sudo mv allure-${ALLURE_VERSION} /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version

      - name: Compute Pages paths (full)
        id: paths
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_PATH="pr/${{ github.head_ref }}"
          else
            BASE_PATH=""
          fi
          echo "CHROMIUM_PATH=${BASE_PATH:+$BASE_PATH/}full/chromium" >> $GITHUB_OUTPUT
          echo "FIREFOX_PATH=${BASE_PATH:+$BASE_PATH/}full/firefox" >> $GITHUB_OUTPUT

      # ---------- Full Chromium ----------
      - name: Restore history from gh-pages (full-chromium)
        run: |
          mkdir -p test_artifacts/allure/allure-results/history
          git init ghp-read
          cd ghp-read
          git remote add origin "https://github.com/${GITHUB_REPOSITORY}.git"
          git fetch --depth=1 origin gh-pages || true
          git checkout gh-pages || echo "No gh-pages yet"
          cd ..
          if [ -d "ghp-read/${{ steps.paths.outputs.CHROMIUM_PATH }}/history" ]; then
            cp -r "ghp-read/${{ steps.paths.outputs.CHROMIUM_PATH }}/history/"* test_artifacts/allure/allure-results/history/ || true
          fi

      - name: Run chromium full test suite
        run: |
          mkdir -p test_artifacts/allure/allure-report
          mkdir -p test_artifacts/allure/allure-results/history
          mkdir -p test_artifacts/allure/screenshots
          cat > test_artifacts/allure/allure-results/environment.properties <<EOF
          browser=chromium
          headless=true
          baseUrl=$BASE_URL
          commit=$GITHUB_SHA
          branch=$GITHUB_REF_NAME
          runId=$GITHUB_RUN_ID
          testSuite=full
          EOF
          AI_HEALING_ENABLED=false HEADLESS=true pytest --alluredir=test_artifacts/allure/allure-results --capture=tee-sys --reruns 2 --reruns-delay 5 -m "login and not (smoke or danger)" -n auto

      - name: Generate Test Results (full-chromium)
        if: always()
        run: |
          allure generate test_artifacts/allure/allure-results -o test_artifacts/allure/allure-report --clean --single-file

      - name: Publish Full Report (Chromium) + History to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: test_artifacts/allure/allure-report
          destination_dir: ${{ steps.paths.outputs.CHROMIUM_PATH }}
          keep_files: true

      - name: Persist history to gh-pages (full-chromium)
        run: |
          git init ghp-write
          cd ghp-write
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git fetch --depth=1 origin gh-pages || true
          git checkout -B gh-pages
          mkdir -p "${{ steps.paths.outputs.CHROMIUM_PATH }}/history"
          cp -r ../test_artifacts/allure/allure-report/history/* "${{ steps.paths.outputs.CHROMIUM_PATH }}/history/" 2>/dev/null || true
          git add -A
          git commit -m "Update Allure history (full-chromium) for ${GITHUB_SHA}" || true
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---------- Full Firefox ----------
      - name: Restore history from gh-pages (full-firefox)
        run: |
          mkdir -p test_artifacts/allure/allure-results/history
          if [ -d "ghp-read/${{ steps.paths.outputs.FIREFOX_PATH }}/history" ]; then
            cp -r "ghp-read/${{ steps.paths.outputs.FIREFOX_PATH }}/history/"* test_artifacts/allure/allure-results/history/ || true
          fi

      - name: Run firefox full tests
        run: |
          mkdir -p test_artifacts/allure/allure-report
          mkdir -p test_artifacts/allure/allure-results/history
          mkdir -p test_artifacts/allure/screenshots
          cat > test_artifacts/allure/allure-results/environment.properties <<EOF
          browser=firefox
          headless=true
          baseUrl=$BASE_URL
          commit=$GITHUB_SHA
          branch=$GITHUB_REF_NAME
          runId=$GITHUB_RUN_ID
          testSuite=full
          EOF
          AI_HEALING_ENABLED=false BROWSER=firefox HEADLESS=true pytest --alluredir=test_artifacts/allure/allure-results --capture=tee-sys --reruns 2 --reruns-delay 5 -m "login and not (smoke or danger)" -n auto

      - name: Generate Test Results (full-firefox)
        if: always()
        run: |
          allure generate test_artifacts/allure/allure-results -o test_artifacts/allure/allure-report --clean --single-file

      - name: Publish Full Report (Firefox) + History to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: test_artifacts/allure/allure-report
          destination_dir: ${{ steps.paths.outputs.FIREFOX_PATH }}
          keep_files: true

      - name: Persist history to gh-pages (full-firefox)
        run: |
          cd ghp-write
          git pull
          mkdir -p "${{ steps.paths.outputs.FIREFOX_PATH }}/history"
          cp -r ../test_artifacts/allure/allure-report/history/* "${{ steps.paths.outputs.FIREFOX_PATH }}/history/" 2>/dev/null || true
          git add -A
          git commit -m "Update Allure history (full-firefox) for ${GITHUB_SHA}" || true
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional dashboard for quick links
  dashboard:
    runs-on: ubuntu-latest
    needs: [smoke, full]
    steps:
      - uses: actions/checkout@v4

      - name: Create dashboard index
        run: |
          mkdir -p dashboard
          cat > dashboard/index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8" />
              <title>Test Execution Dashboard</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .dashboard { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
                  .card { border: 1px solid #ddd; padding: 20px; border-radius: 8px; }
                  .card h3 { margin-top: 0; }
                  .card a { display: block; margin: 10px 0; padding: 10px; background: #f5f5f5; text-decoration: none; border-radius: 4px; }
                  .card a:hover { background: #e5e5e5; }
              </style>
          </head>
          <body>
              <h1>🚀 Test Execution Dashboard</h1>
              <p>Links to the latest published reports on GitHub Pages. PR runs appear under pr/&lt;branch&gt;.</p>

              <div class="dashboard">
                  <div class="card">
                      <h3>🔥 Smoke Tests</h3>
                      <a href="smoke/chromium/">Main: Chromium Smoke</a>
                      <a href="smoke/firefox/">Main: Firefox Smoke</a>
                  </div>
                  <div class="card">
                      <h3>🎯 Full Test Suite</h3>
                      <a href="full/chromium/">Main: Chromium Full</a>
                      <a href="full/firefox/">Main: Firefox Full</a>
                  </div>
              </div>
              <hr />
              <p><small>Updated: $(date)</small></p>
          </body>
          </html>
          EOF

      - name: Publish Dashboard to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: dashboard
          keep_files: true